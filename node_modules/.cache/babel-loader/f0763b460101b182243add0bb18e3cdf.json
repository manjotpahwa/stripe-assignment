{"ast":null,"code":"var _jsxFileName = \"/Users/manjotpahwa/stripe/assignment/stripe-card-payment/src/CheckoutForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [billingDetails, setBillingDetails] = useState({\n    email: '',\n    phone: '',\n    name: ''\n  });\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"2LTTufVZkd\",\n          qty: 2\n        }],\n        country: \"us\",\n        currency: \"usd\",\n        email: 'shopperjoe@gmail.com'\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: ev.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  const Field = ({\n    label,\n    id,\n    type,\n    placeholder,\n    required,\n    autoComplete,\n    value,\n    onChange\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"FormRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    className: \"FormRowLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"FormRowInput\",\n    id: id,\n    type: type,\n    placeholder: placeholder,\n    required: required,\n    autoComplete: autoComplete,\n    value: value,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: \"FormGroup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    label: \"Name\",\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Jane Doe\",\n    required: true,\n    autoComplete: \"name\",\n    value: billingDetails.name,\n    onChange: e => {\n      setBillingDetails({ ...billingDetails,\n        name: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    label: \"Email\",\n    id: \"email\",\n    type: \"email\",\n    placeholder: \"janedoe@gmail.com\",\n    required: true,\n    autoComplete: \"email\",\n    value: billingDetails.email,\n    onChange: e => {\n      setBillingDetails({ ...billingDetails,\n        email: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    label: \"Phone\",\n    id: \"phone\",\n    type: \"tel\",\n    placeholder: \"(941) 555-0123\",\n    required: true,\n    autoComplete: \"tel\",\n    value: billingDetails.phone,\n    onChange: e => {\n      setBillingDetails({ ...billingDetails,\n        phone: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }) : \"Pay\")), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    className: succeeded ? \"result-message\" : \"result-message hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, \"Payment succeeded, see the result in your\", /*#__PURE__*/React.createElement(\"a\", {\n    href: `https://dashboard.stripe.com/test/payments`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, \" \", \"Stripe dashboard.\"), \" Refresh the page to pay again.\"));\n}","map":{"version":3,"sources":["/Users/manjotpahwa/stripe/assignment/stripe-card-payment/src/CheckoutForm.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","billingDetails","setBillingDetails","email","phone","name","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","id","qty","country","currency","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","target","value","Field","label","type","placeholder","required","autoComplete","onChange","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [billingDetails, setBillingDetails] = useState({\n    email: '',\n    phone: '',\n    name: '',\n  });\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          items: [{ id: \"2LTTufVZkd\", qty: 2}],\n          country: \"us\",\n          currency: \"usd\",\n          email: 'shopperjoe@gmail.com'\n        })\n      })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: ev.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  const Field = ({\n  label,\n  id,\n  type,\n  placeholder,\n  required,\n  autoComplete,\n  value,\n  onChange,\n  }) => (\n    <div className=\"FormRow\">\n      <label htmlFor={id} className=\"FormRowLabel\">\n        {label}\n      </label>\n      <input\n        className=\"FormRowInput\"\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        required={required}\n        autoComplete={autoComplete}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <fieldset className=\"FormGroup\">\n        <Field\n          label=\"Name\"\n          id=\"name\"\n          type=\"text\"\n          placeholder=\"Jane Doe\"\n          required\n          autoComplete=\"name\"\n          value={billingDetails.name}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, name: e.target.value});\n          }}\n        />\n        <Field\n          label=\"Email\"\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"janedoe@gmail.com\"\n          required\n          autoComplete=\"email\"\n          value={billingDetails.email}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, email: e.target.value});\n          }}\n        />\n        <Field\n          label=\"Phone\"\n          id=\"phone\"\n          type=\"tel\"\n          placeholder=\"(941) 555-0123\"\n          required\n          autoComplete=\"tel\"\n          value={billingDetails.phone}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, phone: e.target.value});\n          }}\n        />\n      </fieldset>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n          {\" \"}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}